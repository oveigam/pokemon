/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as PokemonImport } from './routes/pokemon'
import { Route as MoveImport } from './routes/move'
import { Route as LoginImport } from './routes/login'
import { Route as ItemImport } from './routes/item'
import { Route as AbilityImport } from './routes/ability'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const PokemonRoute = PokemonImport.update({
  id: '/pokemon',
  path: '/pokemon',
  getParentRoute: () => rootRoute,
} as any)

const MoveRoute = MoveImport.update({
  id: '/move',
  path: '/move',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ItemRoute = ItemImport.update({
  id: '/item',
  path: '/item',
  getParentRoute: () => rootRoute,
} as any)

const AbilityRoute = AbilityImport.update({
  id: '/ability',
  path: '/ability',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/ability': {
      id: '/ability'
      path: '/ability'
      fullPath: '/ability'
      preLoaderRoute: typeof AbilityImport
      parentRoute: typeof rootRoute
    }
    '/item': {
      id: '/item'
      path: '/item'
      fullPath: '/item'
      preLoaderRoute: typeof ItemImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/move': {
      id: '/move'
      path: '/move'
      fullPath: '/move'
      preLoaderRoute: typeof MoveImport
      parentRoute: typeof rootRoute
    }
    '/pokemon': {
      id: '/pokemon'
      path: '/pokemon'
      fullPath: '/pokemon'
      preLoaderRoute: typeof PokemonImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/ability': typeof AbilityRoute
  '/item': typeof ItemRoute
  '/login': typeof LoginRoute
  '/move': typeof MoveRoute
  '/pokemon': typeof PokemonRoute
  '/signup': typeof SignupRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/ability': typeof AbilityRoute
  '/item': typeof ItemRoute
  '/login': typeof LoginRoute
  '/move': typeof MoveRoute
  '/pokemon': typeof PokemonRoute
  '/signup': typeof SignupRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/ability': typeof AbilityRoute
  '/item': typeof ItemRoute
  '/login': typeof LoginRoute
  '/move': typeof MoveRoute
  '/pokemon': typeof PokemonRoute
  '/signup': typeof SignupRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/ability'
    | '/item'
    | '/login'
    | '/move'
    | '/pokemon'
    | '/signup'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/ability' | '/item' | '/login' | '/move' | '/pokemon' | '/signup'
  id:
    | '__root__'
    | '/'
    | '/ability'
    | '/item'
    | '/login'
    | '/move'
    | '/pokemon'
    | '/signup'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AbilityRoute: typeof AbilityRoute
  ItemRoute: typeof ItemRoute
  LoginRoute: typeof LoginRoute
  MoveRoute: typeof MoveRoute
  PokemonRoute: typeof PokemonRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AbilityRoute: AbilityRoute,
  ItemRoute: ItemRoute,
  LoginRoute: LoginRoute,
  MoveRoute: MoveRoute,
  PokemonRoute: PokemonRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/ability",
        "/item",
        "/login",
        "/move",
        "/pokemon",
        "/signup"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/ability": {
      "filePath": "ability.tsx"
    },
    "/item": {
      "filePath": "item.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/move": {
      "filePath": "move.tsx"
    },
    "/pokemon": {
      "filePath": "pokemon.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
